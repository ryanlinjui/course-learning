// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	
    // check if it's A-instruction, and get flag
    Not(in=instruction[15], out=isAinstr);

    // check if it's C-instruction, and get flag
    And(a=instruction[15], b=instruction[14], out=tempisCinstr);
    And(a=tempisCinstr, b=instruction[13], out=isCinstr);    

    // ===========================================================================
    // CPU implementation, check lecture 5.pdf in Project 5: Computer Architecture
    // ===========================================================================

    // 1st Mux16    
    And(a=isCinstr, b=instruction[5], out=ARegSel);    
    Mux16(a=instruction, b=ALUout, sel=ARegSel, out=Mux16Num1stOut);

    // A Register
    Or(a=isAinstr, b=instruction[5], out=ARegLoad);    
    ARegister(in=Mux16Num1stOut, load=ARegLoad, out=ARegOut);

    // 2nd Mux16    
    Mux16(a=ARegOut, b=inM, sel=instruction[12], out=Mux16Num2stOut);

    // D Register
    And(a=isCinstr, b=instruction[4], out=DRegLoad);
    DRegister(in=ALUout, load=DRegLoad, out=DRegOut);
    
    // ALU
    ALU(x=DRegOut, y=Mux16Num2stOut,
        zx=instruction[11], nx=instruction[10],
        zy=instruction[9], ny=instruction[8],
        f=instruction[7], no=instruction[6],
        out=ALUout, zr=zrOut, ng=ngOut
    );
        
    // Outputs: writeM[16], outM, addressM[15]
    And(a=isCinstr, b=instruction[3], out=writeM);
    Or16(a=false, b=ALUout, out=outM);
    Or16(a=false, b=ARegOut, out[0..14]=addressM);    
    
    
    // Outputs: pc[15]
    And(a=zrOut, b=instruction[1], out=JEQ);
    And(a=ngOut, b=instruction[2], out=JLT);
    Or(a=JEQ, b=JLT, out=JLE);

    Or(a=zrOut, b=ngOut, out=ZeroOrNeg);
    Not(in=ZeroOrNeg, out=isPositive);
    And(a=isPositive, b=instruction[0], out=JGT);
    
    Or(a=JLE, b=JGT, out=jumpToA);
    And(a=isCinstr, b=jumpToA, out=PCload);
    Not(in=PCload, out=PCinc);
    PC(in=ARegOut, inc=PCinc, load=PCload, reset=reset, out[0..14]=pc);
}