import textwrap

ciphertexts_hex = [
    "3600BEF7B0676D04CA57EB32D566AFEB228676B36061B98F5DE69E3ED1CD03E589D9CEC6CDE41D0FE132444739771E7871F62B5A33E914",
    "2348ACB8AA6E68509E56F9669D7BAFE42DD405B37E67AFCF5DD0983F83DC4BE08ED8D8C6C5E55841E029101230731E7872F87C6B37E01A30A46B8A4A4B8ADBE0B90D7356C215F6",
    "3500A2F79F6D684FCA69F06B9A7CE7EB3F8643B36A63E9C12AEF897A82CC08E4C7DCD887D9E2010FE63310133671043666BA3D5C3ABA",
    "3B07AEF7B9706950994BF67ED36FE7F66CC74BB6294FF68C12E89E76D1D304E589DBD9C6CEEF585BE7381000317C043679B07C5930F74E28A578",
    "2B1CFCA4F87564119E1EF97ED628FBEA298642BB7B6AA5C10EEE9E3DD1D81FAC90DBD982C5F81F5CA17D640F3B6157727FB232182BA55133A46AC3580382C1E0B118205E8B0FFD4AFD9FC28DCF",
    "2D1DA9F7B46B7A15991EEF7BD664AFE124C74BB56C26A18918E9D02E9ED404FE95D1CAC6CFF9154AFC73103331761E717EA27C502AF71A35AE7C915B18C3D1B2BB033D1BDF13F74AEA9FDF9E804793C06C46E4958184",
    "2348A8B8B6652C00865FE177DE28E0EC6CC705A1666AB9C10EE6883581D104E282909DA78CF50A4EF5241014316D197238F61D1F33EA5438A764C35C0496DBA4FA54121BC809EB4AFA9ECD9EC15D828C6447B18D818A944C71BD6F8CA0CFF8061A2393F7A423A9BF91",
    "3107FBA4AC6375509D57EC7A9A65EAA22DC841F26169BA855DEA957A85D00CE4939EDC88C8B61C4EE13E554732711C7336BF284C7FF15238EB71825C1FC3DBA9B31C271BC41DB21EE6938C9D8E5B8B8426",
    "3B0DA8FBF87178198652B432F328FCF625CA49F26B63BA8818F19574D1F04BE789D1CAC6CDE55843E03357473F6B575F36B53D517FEE5F38BB3D814A078AD0B6BD1A34178B32B506E2D6C083974CC9",
    "3109B2B0B76C2C078B4DB871C869F5E7288A05B07C72F69215E2D02D90CA4BFE82DFD1C6CDF81C0FE9324247317612367BB9315A31F1167D823D80401E8FD1E0B2113657"
]

challenge_ciphertext = "2C07AFF7B76C6009CA5AF777C928C8ED288655BE687FF68514E49576D1DB1EF8C7D6D8C6DFF9154AFB345D022D38037E64B92B4C7FF15238A63D94470E91D0E0A01C36428B18F304E099D8CA834CC7936D51FFD6"
def xor(a, b):
    return bytes(x ^ y for x, y in zip(a, b))


def find_key(ciphertexts):
    
    # Assuem key length is the same as the longest ciphertext
    key = bytearray([0] * max(len(c) for c in ciphertexts))
    
    # Try to find the key by looking at the most common character at each position
    for i in range(len(key)):
        frequency = [0] * 256
        for c in ciphertexts:
            if i < len(c):
                frequency[c[i]] += 1
                
        # Assume the most common character is space
        key[i] = max(range(256), key=lambda x: frequency[x]) ^ ord(' ')
    return key

ciphertexts = [bytes.fromhex(ct) for ct in ciphertexts_hex]
possible_key = find_key(ciphertexts)

def decrypt_challenge(challenge_ciphertext, key):
    challenge_bytes = bytes.fromhex(challenge_ciphertext)
    return xor(challenge_bytes, key)

decrypted_message = decrypt_challenge(challenge_ciphertext, possible_key)

print("Decrypted Challenge Message String:")
print(decrypted_message.decode("ascii", errors="ignore"))
print("\nDecrypted Challenge Message Hex:")
print(textwrap.fill(decrypted_message.hex(), width=8))